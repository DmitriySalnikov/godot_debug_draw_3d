name: Build GDExtension
description: Build GDExtension library
inputs:
  platform:
    description: Target platform (linux|macos|windows|android|ios|web)
    required: true
  target:
    description: Compilation target (editor|template_release|template_debug)
    required: true
    default: "release"
  arch:
    description: Arch (universal|x86_32|x86_64|arm32|arm64|rv64|ppc32|ppc64|wasm32)
    required: true
    default: ""
  artifact:
    description: Artifact name. This name will be used for caching.
    required: true
    default: "bin"
  additional:
    description: Any additional arguments
    default: ""
  additional_enabled_dd3d:
    description: Use force_enabled_dd3d if possible
    default: "true"
  output_libs_path:
    description: Path to compiled libraries
    required: true
    default: "bin"
  use_cache:
    description: Use cache
    default: "true"
  token:
    description: Secrets token
  telemetry_version:
    description: Telemetry version
    default: 92c1c576739703018a935417cdc7a6ff210b7975
runs:
  using: composite
  steps:
    - name: Get godot-cpp SHA
      shell: bash
      id: get_godot_cpp_sha
      run: |
        echo "sha=$(git rev-parse @:./godot-cpp)" >> $GITHUB_OUTPUT

    - name: Checkout telemetry repo
      uses: actions/checkout@v4
      id: checkout_tele_repo
      if: ${{env.PRODUCTION_BUILD == 'true' && inputs.target == 'editor'}}
      continue-on-error: true
      with:
        repository: ${{github.repository_owner}}/my_telemetry_modules
        token: ${{inputs.token}}
        ref: ${{inputs.telemetry_version}}
        path: src/editor/my_telemetry_modules

    - name: Restore .scons_cache directory
      if: inputs.use_cache != 'false'
      id: restore_scons_cache
      uses: actions/cache/restore@v4
      with:
        path: ${{env.SCONS_CACHE}}
        key: ${{github.job}}-${{inputs.artifact}}-${{steps.get_godot_cpp_sha.outputs.sha}}-${{github.ref}}-${{github.sha}}
        restore-keys: |
          ${{github.job}}-${{inputs.artifact}}-${{steps.get_godot_cpp_sha.outputs.sha}}-${{github.ref}}
          ${{github.job}}-${{inputs.artifact}}-${{steps.get_godot_cpp_sha.outputs.sha}}

    - name: Set up Python 3.x
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
        architecture: "x64"

    - name: Configuring Python packages
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          python -m pip install pywin32
        fi
        python -m pip install scons
        python --version
        scons --version

    - name: Linux dependencies
      shell: bash
      if: (runner.os == 'Linux') && (inputs.platform == 'linux')
      run: |
        sudo apt update
        if [[ "${{inputs.arch}}" == *"32" ]];then
          sudo apt install gcc-multilib g++-multilib
        fi

    - name: Compilation
      shell: bash
      run: |
        echo "::group::üõ†Ô∏è GDExtesion Compilation üõ†Ô∏è"
        cd godot-cpp
        git apply --ignore-space-change --ignore-whitespace ../patches/godot_cpp_exclude_unused_classes.patch
        git apply --ignore-space-change --ignore-whitespace ../patches/unity_build.patch
        cd ..

        telemetry_args=""
        if [ "${{env.PRODUCTION_BUILD}}" == "true" ] && [ "${{inputs.target}}" == "editor" ] && [ "${{steps.checkout_tele_repo.conclusion}}" == "success" ]; then
          telemetry_args="telemetry_enabled=yes"
        fi

        scons platform=${{inputs.platform}} arch=${{inputs.arch}} target=${{inputs.target}} addon_output_dir=${{inputs.output_libs_path}} ${{inputs.additional}} $telemetry_args
        if [ "${{inputs.target}}" == "template_release" ] && [ "${{inputs.additional_enabled_dd3d}}" == "true" ]; then
          scons platform=${{inputs.platform}} arch=${{inputs.arch}} target=${{inputs.target}} addon_output_dir=${{inputs.output_libs_path}} force_enabled_dd3d=yes ${{inputs.additional}}
        fi
        echo "::endgroup::"

    - name: Prepare artifact Unix
      if: runner.os != 'Windows' && inputs.platform != 'android' && inputs.platform != 'web'
      shell: bash
      run: |
        if [ "${{inputs.platform}}" == 'macos' ]; then
          found_files=$(find -L ${{inputs.output_libs_path}} -type f -exec file {} + | grep "Mach-O universal" | cut -d: -f1)
          echo "Found files: $found_files"
          strip -u $found_files
        elif [ "${{inputs.platform}}" == 'ios' ]; then
          found_files=$(find -L ${{inputs.output_libs_path}} -type f -exec file {} + | grep ".dylib" | cut -d: -f1)
          echo "Found files: $found_files"
          while IFS= read -r file; do
              strip -u "$file"
          done <<< "$found_files"
        else
          found_files=$(find -L ${{inputs.output_libs_path}} -type f -exec file {} + | grep "ELF" | cut -d: -f1)
          echo "Found files: $found_files"
          strip $found_files
        fi

    - name: Prepare artifact Windows
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Remove-Item ${{inputs.output_libs_path}}/* -Recurse -Include *.exp,*.lib,*.pdb -Force

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{inputs.artifact}}
        retention-days: 7
        path: ${{inputs.output_libs_path}}/*

    - name: Save .scons_cache directory
      if: inputs.use_cache != 'false'
      uses: actions/cache/save@v4
      with:
        path: ${{env.SCONS_CACHE}}
        key: ${{github.job}}-${{inputs.artifact}}-${{steps.get_godot_cpp_sha.outputs.sha}}-${{github.ref}}-${{github.sha}}
