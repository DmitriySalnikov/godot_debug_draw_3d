diff --git a/SConstruct b/SConstruct
index 880d19c..e1208a8 100644
--- a/SConstruct
+++ b/SConstruct
@@ -88,6 +88,7 @@ opts.Add(BoolVariable("generate_template_get_node", "Generate a template version
 
 opts.Add(BoolVariable("build_library", "Build the godot-cpp library.", True))
 opts.Add(EnumVariable("float", "Floating-point precision", "32", ("32", "64")))
+opts.Add(BoolVariable("exclude_unused_classes", "Disable generation of unused classes.", True))
 
 # Add platform options
 tools = {}
diff --git a/binding_generator.py b/binding_generator.py
index fd994bf..1f58170 100644
--- a/binding_generator.py
+++ b/binding_generator.py
@@ -5,6 +5,72 @@ import re
 import shutil
 from pathlib import Path
 
+# This patch does not affect the size of the library, but speeds up the build time.
+# Pass the argument `exclude_unused_classes=no` to generate all classes
+
+USED_CLASSES = []
+DEPENDENCIES = []
+TEMP_ENGINE_CLASS_NAMES = []
+
+def SCAN_DEPENDENCIES(api):
+    global USED_CLASSES
+    global DEPENDENCIES
+
+    used_classes_file = "../patches/used_classes.json"
+    import sys
+    sys.path.insert(0, "../patches")
+    import get_used_classes
+    get_used_classes.extract_used_classes("../src", used_classes_file)
+
+    with open(used_classes_file, "r") as uc_file:
+        USED_CLASSES = json.load(uc_file)
+    for class_api in api["classes"]:
+        TEMP_ENGINE_CLASS_NAMES.append(class_api["name"])
+    for name in USED_CLASSES:
+        _GET_DEPS(api, name)
+    print("Explicit classes: " + str(USED_CLASSES))
+    print("Implicit classes: " + str(DEPENDENCIES))
+
+def _GET_DEPS(api, name):
+    def _ADD_UNIQUE_ENGINE_CLASS(_class, _to_add):
+        class_name = _class
+        for start in ["enum::", "typedarray::", "bitfield::"]:
+            if _class.startswith(start):
+                class_name = _class[len(start):].partition(".")[0]
+                break
+
+        if class_name in TEMP_ENGINE_CLASS_NAMES and class_name not in _to_add:
+            _to_add.append(class_name)
+
+    for class_api in api["classes"]:
+        if not (class_api["name"] == name or class_api["name"].lower() == name.lower()):
+            continue
+
+        need_to_add = []
+
+        if class_api["name"] == "Object":
+            break
+
+        if class_api["inherits"] not in DEPENDENCIES:
+            need_to_add.append(class_api["inherits"])
+
+        for method in class_api.get("methods", []):
+            if "return_value" in method:
+                _ADD_UNIQUE_ENGINE_CLASS(method["return_value"]["type"], need_to_add)
+
+            if "arguments" in method:
+                for arg in method["arguments"]:
+                    _ADD_UNIQUE_ENGINE_CLASS(arg["type"], need_to_add)
+
+        for c in need_to_add:
+            if c not in DEPENDENCIES:
+                DEPENDENCIES.append(c)
+                _GET_DEPS(api, c)
+
+        break
+
+def NEED_TO_EXCLUDE(name):
+    return len(USED_CLASSES) > 0 and name not in USED_CLASSES and name not in DEPENDENCIES
 
 def generate_mod_version(argcount, const=False, returns=False):
     s = """
@@ -77,6 +143,7 @@ def get_file_list(api_filepath, output_dir, headers=False, sources=False):
     with open(api_filepath) as api_file:
         api = json.load(api_file)
 
+    SCAN_DEPENDENCIES(api)
     core_gen_folder = Path(output_dir) / "gen" / "include" / "godot_cpp" / "core"
     include_gen_folder = Path(output_dir) / "gen" / "include" / "godot_cpp"
     source_gen_folder = Path(output_dir) / "gen" / "src"
@@ -101,6 +168,8 @@ def get_file_list(api_filepath, output_dir, headers=False, sources=False):
         # TODO: Properly setup this singleton since it conflicts with ClassDB in the bindings.
         if engine_class["name"] == "ClassDB":
             continue
+        if NEED_TO_EXCLUDE(engine_class["name"]):
+            continue
         header_filename = include_gen_folder / "classes" / (camel_to_snake(engine_class["name"]) + ".hpp")
         source_filename = source_gen_folder / "classes" / (camel_to_snake(engine_class["name"]) + ".cpp")
         if headers:
@@ -140,6 +209,9 @@ def print_file_list(api_filepath, output_dir, headers=False, sources=False):
 
 
 def scons_emit_files(target, source, env):
+    global USED_CLASSES
+    if "exclude_unused_classes" in env and not env["exclude_unused_classes"]:
+        USED_CLASSES = []
     files = [env.File(f) for f in get_file_list(str(source[0]), target[0].abspath, True, True)]
     env.Clean(files, target)
     return [target[0]] + files, source
@@ -962,6 +1034,8 @@ def generate_engine_classes_bindings(api, output_dir, use_template_get_node):
         # TODO: Properly setup this singleton since it conflicts with ClassDB in the bindings.
         if class_api["name"] == "ClassDB":
             continue
+        if NEED_TO_EXCLUDE(class_api["name"]):
+            continue
         # Check used classes for header include.
         used_classes = set()
         fully_used_classes = set()
