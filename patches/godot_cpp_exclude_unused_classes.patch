diff --git a/binding_generator.py b/binding_generator.py
index 8442153..c31e40e 100644
--- a/binding_generator.py
+++ b/binding_generator.py
@@ -75,6 +75,11 @@ def get_file_list(api_filepath, output_dir, headers=False, sources=False, profil
     with open(api_filepath, encoding="utf-8") as api_file:
         api = json.load(api_file)
 
+    import sys
+    sys.path.insert(0, "../patches")
+    import get_used_classes
+    sys.path.pop(0)
+    get_used_classes.scan_dependencies(api)
     return _get_file_list(api, output_dir, headers, sources)
 
 
diff --git a/tools/godotcpp.py b/tools/godotcpp.py
index d80fafc..91edb81 100644
--- a/tools/godotcpp.py
+++ b/tools/godotcpp.py
@@ -131,6 +131,12 @@ def no_verbose(env):
 
 
 def scons_emit_files(target, source, env):
+    import sys
+    sys.path.insert(0, "../patches")
+    import get_used_classes
+    sys.path.pop(0)
+    get_used_classes.setup(env.get("exclude_unused_classes", True), env.get("folder_to_include_classes", "../src"))
+
     profile_filepath = env.get("build_profile", "")
     if profile_filepath:
         profile_filepath = normalize_path(profile_filepath, env)
@@ -139,7 +145,7 @@ def scons_emit_files(target, source, env):
     env.Clean(target, [env.File(f) for f in get_file_list(str(source[0]), target[0].abspath, True, True)])
 
     api = generate_trimmed_api(str(source[0]), profile_filepath)
-    files = [env.File(f) for f in _get_file_list(api, target[0].abspath, True, True)]
+    files = [env.File(f) for f in get_used_classes.delete_useless(_get_file_list(api, target[0].abspath, True, True))]
     env["godot_cpp_gen_dir"] = target[0].abspath
     return files, source
 
@@ -370,6 +376,10 @@ def options(opts, env):
     opts.Add(BoolVariable("dev_build", "Developer build with dev-only debugging code (DEV_ENABLED)", False))
     opts.Add(BoolVariable("verbose", "Enable verbose output for the compilation", False))
 
+    opts.Add(BoolVariable("exclude_unused_classes", "Disable generation of unused classes.", True))
+    opts.Add(PathVariable("folder_to_include_classes", "Path to the directory containing extension sources", "../src", PathVariable.PathIsDir))
+    opts.Add(PathVariable("custom_godotcpp_suffix", "Additional custom library suffix", "", PathVariable.PathAccept))
+
     # Add platform options (custom tools can override platforms)
     for pl in sorted(set(platforms + custom_platforms)):
         tool = Tool(pl, toolpath=get_platform_tools_paths(env))
@@ -494,7 +504,7 @@ def generate(env):
     if not env["threads"]:
         suffix += ".nothreads"
 
-    env["suffix"] = suffix  # Exposed when included from another project
+    env["suffix"] = suffix + env["custom_godotcpp_suffix"] # Exposed when included from another project
     env["OBJSUFFIX"] = suffix + env["OBJSUFFIX"]
 
     # compile_commands.json
