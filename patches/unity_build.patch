diff --git a/SConstruct b/SConstruct
index 27ee137..f145bf3 100644
--- a/SConstruct
+++ b/SConstruct
@@ -10,6 +10,29 @@ from SCons.Errors import UserError
 EnsureSConsVersion(4, 0)
 
 
+def generate_unity_build(bindings, env):
+    from pathlib import Path
+    import math
+
+    print("Generating source files for unity build:")
+    res = [Path(str(f)).absolute().as_posix()
+           for f in bindings if str(f).endswith(".cpp")]
+    unity_dir = Path("gen_unity")
+    unity_dir.mkdir(parents=True, exist_ok=True)
+    unity_files = []
+    for i in range(math.ceil(len(res) / 32)):
+        u_path = unity_dir / ("unity_%d.cpp" % i)
+        print(u_path)
+        unity_files.append(u_path.as_posix())
+        with u_path.open("w+") as unity_file:
+            unity_file.write("\n".join(
+                ["/* generated by Scons */\n"] + ["#include \"%s\"\n" % f for f in res[:32]]))
+            res = res[32:]
+
+    print()
+    return [f for f in bindings if not str(f).endswith(".cpp")] + [Path(f).absolute().as_posix() for f in unity_files]
+
+
 def add_sources(sources, dir, extension):
     for f in os.listdir(dir):
         if f.endswith("." + extension):
@@ -215,6 +238,8 @@ bindings = env.GenerateBindings(
     [get_api_file(env), os.path.join(get_gdextension_dir(env), "gdextension_interface.h"), "binding_generator.py"],
 )
 
+bindings = generate_unity_build(bindings, env)
+
 scons_cache_path = os.environ.get("SCONS_CACHE")
 if scons_cache_path is not None:
     CacheDir(scons_cache_path)
